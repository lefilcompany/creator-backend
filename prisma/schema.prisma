// Esse é o arquivo de configuração do Prisma, onde você define 
// os modelos de dados da sua aplicação.
// Ao rodar uma migration, seu banco de dados será modelado a partir desses modelos.
// Por fim, você poderá acessar esses modelos através do Prisma Client.
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  userName       String
  email          String    @unique
  password       String
  cityUser       String
  stateUser      String
  rolePermission String    @default("Usuário sem equipe")
  roleValue      Int       @default(0) 
  teamId         Int?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime?
  isDeleted      Int       @default(0)

  stripeCustomerId String?        @unique
  payments         Payment[]
  invoices         Invoice[]
  subscriptions    Subscription[]

  //Relacionamento
  team Team? @relation(fields: [teamId], references: [id])

  contents Content[] // Relacionamento com conteúdos criados pelo usuário
  planning Planning[] // Relacionamento com planejamentos criados pelo usuário
  reviews  Review[] // Relacionamento com revisões criadas pelo usuário
  solicitations Solicitation[] // Relacionamento com solicitações de equipe
  Brand Brand[]
}

model Team {
  id         Int       @id @default(autoincrement()) // Identificador da equipe
  nameTeam   String // Nome da equipe
  accessCode String    @unique // Código de acesso da equipe
  createdAt  DateTime  @default(now()) // Data de criação
  updatedAt  DateTime? // Data de atualização
  isDeleted  Int       @default(0) // Flag de exclusão lógica

  users     User[] // Relacionamento com usuários
  teamPlans TeamPlan[] // Relacionamento com planos de equipe
  brands    Brand[] // Relacionamento com marcas
  themes    Theme[] // Relacionamento com temas
  personas  Persona[] // Relacionamento com personas
  contents  Content[] // Relacionamento com conteúdos
  planning  Planning[] // Relacionamento com planejamentos
  reviews   Review[] // Relacionamento com revisões
  solicitations Solicitation[] // Relacionamento com solicitações de equipe
}

model Plan {
  id    Int     @id @default(autoincrement()) // Identificador único do plano
  name  String // Nome do plano
  price Decimal @db.Decimal(10, 2) // Preço mensal

  membersLimit  Int // Limite de membros
  brandsLimit   Int // Limite de marcas
  themesLimit   Int // Limite de temas estratégicos
  personasLimit Int // Limite de personas
  contentLimit  Int // Limite de conteúdos criados
  planningLimit Int // Limite de planejamentos de conteúdo
  reviewLimit   Int // Limite de revisões de conteúdo

  createdAt DateTime  @default(now()) // Data de criação do plano
  updatedAt DateTime? // Data de atualização do plano
  isDeleted Int       @default(0) // Flag de exclusão lógica

  teamPlans TeamPlan[] // Relacionamento com planos de equipe
}

model Brand {
  id                Int       @id @default(autoincrement())
  name              String
  teamId            Int
  userId            Int
  valueProposition  String    
  brandPillars      String
  brandMission      String
  brandInspiration  String
  currentObjective  String
  numericTarget     String
  restrictions      String
  brandHashtags     String
  referenceContents String
  importantDates    String
  relevantContent   String
  brandCrisis       String
  influencersAction Int
  brandManual       Int
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  isDeleted         Int       @default(0)

  team     Team     @relation(fields: [teamId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
  themes   Theme[]                                                          
  personas Persona[]
  contents Content[]
  planning Planning[]
  reviews  Review[]
}


model Theme {
  id             Int    @id @default(autoincrement()) // Identificador único do tema
  brandId        Int
  teamId         Int
  title          String // Título do tema
  description    String @db.VarChar(512) // Descrição
  colors         String // Paleta de cores
  voiceAI        String // Tom de voz da IA
  universeTarget String // Público/Universo alvo
  hashtags       String // Hashtags
  objectives     String @db.VarChar(512) // Objetivos do tema
  addInfo        String @db.Text // Informações adicionais

  createdAt DateTime  @default(now()) // Data de criação
  updatedAt DateTime? // Data de atualização
  isDeleted Int       @default(0) // Flag de exclusão lógica

  brand    Brand      @relation(fields: [brandId], references: [id]) // Marca relacionada
  team     Team       @relation(fields: [teamId], references: [id]) // Equipe relacionada
  contents Content[] // Relacionamento com conteúdos
  planning Planning[] // Relacionamento com planejamentos
}

model Persona {
  id             Int      @id @default(autoincrement())
  brandId        Int
  teamId         Int
  name           String
  gender         String
  age            String
  location       String
  positionDegree String   // Cargo e formação acadêmica
  beliefs        String   // Crenças e interesses
  contentHabit   String   // Hábitos de consumo
  mainObjective  String   // Metas e objetivos
  challenge      String   // Desafios enfrentados
  favoriteVoice  String   // Tom de voz preferido
  buyJourney     String   // Estágio da jornada de compra
  interestTrigger String  // Gatilhos de interesse

  createdAt      DateTime @default(now()) // Data de criação
  updatedAt      DateTime @default(now()) // Data de atualização
  isDeleted      Int      @default(0)     // Exclusão lógica (0 = ativa)

  brand    Brand     @relation(fields: [brandId], references: [id]) // Marca relacionada
  team     Team      @relation(fields: [teamId], references: [id]) // Equipe relacionada
  contents Content[] // Relacionamento com conteúdos
}

model Content {
  id              Int       @id @default(autoincrement()) // ID do conteúdo
  userId          Int
  teamId          Int
  brandId         Int
  themeId         Int
  personaId       Int?
  microResult     String // Micro-resultados esperados
  mainMessage     String // Mensagem principal em 3s
  feeling         String    @db.VarChar(512) // Sentimento transmitido
  format          String    @db.VarChar(512) // Formato ideal para o conteúdo
  nextStep        String // Próximo passo para o usuário
  isPromote       Int // 0 = não impulsionado, 1 = sim
  visualReference Int // 0 = não, 1 = sim
  responseAI      String // Resposta da IA
  createdAt       DateTime  @default(now()) // Data de criação
  updatedAt       DateTime? // Data de atualização
  isDeleted       Int       @default(0) // 0 = ativo, 1 = deletado

  user    User     @relation(fields: [userId], references: [id])
  team    Team     @relation(fields: [teamId], references: [id])
  brand   Brand    @relation(fields: [brandId], references: [id])
  theme   Theme    @relation(fields: [themeId], references: [id])
  persona Persona? @relation(fields: [personaId], references: [id])
}

model Planning {
  id          Int       @id @default(autoincrement()) // ID do planejamento
  userId      Int
  brandId     Int
  themeId     Int
  teamId      Int
  platform    String    @db.VarChar(255) // Plataformas foco do planejamento
  postsNumber Int // Quantidade de posts planejados
  addInfo     String // Informações adicionais
  responseAI  String // Resposta da IA
  createdAt   DateTime  @default(now()) // Data de criação
  updatedAt   DateTime? // Data de atualização
  isDeleted   Int       @default(0) // Exclusão lógica: 0 = ativo, 1 = deletado

  user  User  @relation(fields: [userId], references: [id])
  brand Brand @relation(fields: [brandId], references: [id])
  theme Theme @relation(fields: [themeId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
}

model Review {
  id         Int       @id @default(autoincrement()) // ID da revisão
  userId     Int
  brandId    Int
  teamId     Int
  iaText     String // Prompt para explicação da imagem
  responseAI String // Resposta da IA
  createdAt  DateTime  @default(now()) // Data de criação
  updatedAt  DateTime? // Data de atualização
  isDeleted  Int       @default(0) // Exclusão lógica: 0 = ativo, 1 = deletado

  user  User  @relation(fields: [userId], references: [id])
  brand Brand @relation(fields: [brandId], references: [id])
  team  Team  @relation(fields: [teamId], references: [id])
}

model TeamPlan {
  id        Int       @id @default(autoincrement()) // ID do relacionamento
  teamId    Int
  planId    Int
  endDate   DateTime // Data de fim da assinatura
  createdAt DateTime  @default(now()) // Data de início da assinatura
  updatedAt DateTime? // Data de atualização
  isDeleted Int       @default(0) // Exclusão lógica (0 = ativo, 1 = deletado)

  team Team @relation(fields: [teamId], references: [id])
  plan Plan @relation(fields: [planId], references: [id])
}

model Payment {
  id                  Int       @id @default(autoincrement())
  user                User      @relation(fields: [userId], references: [id])
  userId              Int
  stripePaymentIntent String    @unique
  stripeChargeId      String?
  amount              Decimal
  currency            String
  status              String
  paymentMethod       String?
  description         String?
  createdAt           DateTime  @default(now())
  paidAt              DateTime?
  receiptUrl          String?
  refunded            Int       @default(0)
  refunds             Refund[]
  invoice             Invoice?
}

model Refund {
  id             Int      @id @default(autoincrement())
  paymentId      Int
  payment        Payment  @relation(fields: [paymentId], references: [id])
  stripeRefundId String   @unique
  amount         Decimal
  reason         String?
  refundedAt     DateTime @default(now())
}

model Invoice {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int
  stripeInvoiceId String    @unique
  payment         Payment?  @relation(fields: [paymentId], references: [id])
  paymentId       Int?      @unique
  amountDue       Decimal
  amountPaid      Decimal
  status          String
  dueDate         DateTime?
  createdAt       DateTime  @default(now())
}

model Subscription {
  id                   Int       @id @default(autoincrement())
  user                 User      @relation(fields: [userId], references: [id])
  userId               Int
  stripeSubscriptionId String    @unique
  planName             String
  status               String
  startedAt            DateTime
  currentPeriodEnd     DateTime
  canceledAt           DateTime?
}

model Solicitation {
  id          Int       @id @default(autoincrement())
  userId      Int
  teamId      Int
  status      Int    @default(0) // Status da solicitação (Pendente, Aceita, Rejeitada)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? // Data de atualização
  isDeleted   Int       @default(0) // Exclusão lógica (0 = ativo, 1 = deletado)

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}